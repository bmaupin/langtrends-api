apiVersion: v1
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: api
    name: api
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: api
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: postgresql
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: api
    name: api
  spec:
    # Start with 1 pod until the initial data load is complete
    replicas: 1
    selector:
      deploymentconfig: api
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          app: api
          deploymentconfig: api
      spec:
        containers:
        - env:
          - name: GITHUB_API_KEY
            value: ${GITHUB_API_KEY}
          - name: PORT
            value: "8080"
          - name: STACKOVERFLOW_API_KEY
            value: ${STACKOVERFLOW_API_KEY}
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          - name: NODE_ENV
            value: production
          - name: POPCON_API_PASSWORD
            value: ${POPCON_API_PASSWORD}
          image: docker-registry.default.svc:5000/${NAMESPACE}/api
          imagePullPolicy: Always
          name: api
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 256Mi
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - api
        from:
          kind: ImageStreamTag
          name: api:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    replicas: 1
    selector:
      name: postgresql
    strategy:
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          image: docker-registry.default.svc:5000/openshift/postgresql@sha256:62a42216cb66e00cfcc66a28a6fb9a9953f2aed8592c4fd5140ddfa5b2193193
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - pg_isready -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
          name: postgresql
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            initialDelaySeconds: 5
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: api
    name: api
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: api:latest
    source:
      git:
        ref: master
        uri: https://github.com/bmaupin/loopback-test.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:8
          namespace: openshift
      type: Source
    triggers:
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - type: ImageChange
    - type: ConfigChange
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: api
    name: api
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: api
    name: api
  spec:
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: api
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
kind: Template
parameters:
- name: GITHUB_API_KEY
  required: true
- name: NAMESPACE
  displayName: Project
  description: The OpenShift project where this application will be deployed
  required: true
- name: POPCON_API_PASSWORD
  required: true
- name: POSTGRESQL_USER
  description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  required: true
- name: POSTGRESQL_PASSWORD
  description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
- name: POSTGRESQL_DATABASE
  description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  required: true
  value: sampledb
- name: STACKOVERFLOW_API_KEY
  required: true
- name: GENERIC_WEBHOOK_SECRET
  displayName: Generic Webhook Secret
  description: A secret string used to configure the Generic webhook.
  generate: expression
  from: '[a-zA-Z0-9]{40}'
- name: GITHUB_WEBHOOK_SECRET
  displayName: GitHub Webhook Secret
  description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  generate: expression
  from: '[a-zA-Z0-9]{40}'
